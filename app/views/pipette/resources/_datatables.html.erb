<link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script>
    class ResourceProcessing {
        constructor() {
            this.selected_resources = [];
        }

        setResourceSelected(resource) {
            if (resource.startsWith('resource_')) {
                const resource_id = resource.split('_')[1];
                const resource_info = $(`#${resource}`).parent().data('resource');
                resource_info.aspace_id = resource_id;
                const resource_index = this.selected_resources.findIndex(d => d.aspace_id === resource_id);

                if ($(`#${resource}:checked`) && resource_index === -1) {
                    this.selected_resources.push(resource_info);
                } else {
                    this.selected_resources.splice(resource_index, 1);
                }

                this.#setStorage();
                this.setModalDisplay();
                this.#setSelectedFormValue();
            }
        }

        selectedResourcesEventHandler(resources_table) {
            resources_table.on('click', (e) => {
                this.setResourceSelected(e.target.id);
            });
        }

        clearSelectedOnSubmit() {
            $('#selected-resources').on('click', () => {
                this.clearResources();
            })
        }

        clearSelectAll(table) {
            $('.clear-all-resources').on('click', (e) => {
                e.preventDefault();
                table.cells(null, 0).every( function () {
                    const current_cell = $(this.node()).find('input[type="checkbox"]');
                    current_cell.prop('checked', false);
                });
                this.clearResources();
                this.setModalDisplay();
                this.#setSelectedFormValue();
            });
        }

        selectAll() {
            const self = this;
            $('.check-all-resources').on('click', function(e) {
                e.preventDefault();
                // This selects every row visible or not. Probably don't want this
               /* table.cells(null, 0).every( function () {
                    const current_cell = $(this.node()).find('input[type="checkbox"]');
                    current_cell.prop('checked', true);
                    self.setResourceSelected(current_cell.attr('id'))
                });*/

                // This selects visible rows
                $('#resource-list input[type=checkbox]').each(function() {
                    const _this = $(this);
                    _this.prop('checked', true);
                    const resource = _this.attr('id');
                    self.setResourceSelected(resource)
                });
                self.#setStorage();
                self.setModalDisplay();
                self.#setSelectedFormValue();
            });
        }

        forceIndexing() {
            $('#force_indexing').on('click', function() {
                let should_force = ($(this).is(':checked')) ? 'true' : 'false';
                $('.should-force-indexing').val(should_force);
            });
        }

        setModalDisplay() {
            let resource_text = '';
            const resources = sessionStorage.getItem('resourcesToIndex');
            if (resources !== null) {
                resource_text = JSON.parse(resources).map((d) => {
                    return `<tr><td>${d.aspace_id}</td><td>${d.collection}</td><td>${d.name}</td></tr>`;
                });
            } else {
                resource_text = '<tr><td colspan="3">No collections set for indexing</td></tr>';
            }

            $('#selected-resources tbody').html(resource_text);
        }

        deleteItem() {
            $('#resource-list').on('click', function(e) {
               const ead_id = e.target.id;
                if (e.target.id.startsWith('ead_deletion_btn')) {
                    const ead_collection = ead_id.split('_');
                    const msg = `Are you sure you want to delete collection: "${ead_collection[ead_collection.length - 1]}". This action cannot be undone`;
                    return window.confirm(msg);
                }

                return true;
            });
        }

        clearResources() {
            this.selected_resources = [];
            sessionStorage.removeItem('resourcesToIndex');
        }

        /**
         * Submit items for indexing from modal window
         * Triggers submission of index-selected-items form
         */
        indexItems() {
            $('#submit-requested-resources').on('click', function() {
                $('#selected-resources').trigger('click');
            });
        }

        // Private methods
        #setStorage() {
            sessionStorage.setItem('resourcesToIndex', JSON.stringify(this.selected_resources));
        }

        #setSelectedFormValue() {
            const aspace_ids = this.selected_resources.map(d => d.aspace_id).join(',');
            $('#aspace_id').val(aspace_ids);
            this.#setSelectedSubmitBtns();
        }

        #setSelectedSubmitBtns() {
            $('#selected-resources, #submit-requested-resources').prop('disabled', this.selected_resources.length === 0);
        }
    }
</script>
<script>
    $(function() {
        let recently_indexed = $('#recently-updated');
        const current_time = new Date().getTime();
        const ONE_DAY =  86400000; // milliseconds
        const ONE_WEEK = ONE_DAY * 7;
        const ONE_MONTH = ONE_DAY * 30;

        // Initialize the DataTable
        const resources_table = $('#resource-list').DataTable({
            columnDefs: [
                { orderable: false, targets: [0, 6] },
                { searchable: false, targets: [0, 5, 6] }
            ],
            // Callback to hide spinner and display table when it's finished loading
            initComplete: function(settings, json) {
                $('.spinner-border').addClass('d-none');
                $('#resource-display').removeClass('opacity-0');
            },
            pageLength: 25,
            searching: true,
            language: {
                sSearch: '', // Removes search label text
                searchPlaceholder: 'Search'
            },
            order: [[4, 'desc'], [5, 'desc'], [3, 'asc']] // updated on aspace, then indexed on arclight, then by collection name
        });
        // Add our custom search filter select box to the table
        $("#resource-list_filter.dataTables_filter").prepend(recently_indexed);

        // Reset search by updating the selected value and trigger the change event, so that our custom search filter fires
        $('#reset_search').on('click', function() {
            if (recently_indexed.val() !== '') {
                recently_indexed.val('').trigger('change');
            }
            if ($('input[type=search]').val() !== '') {
                resources_table.search('').draw();
            }
        });

        // Add our custom search filter to DataTables
        $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
            let val = recently_indexed.val();
            let date_from;

            if (val === '') {
                return true;
            }

            if (val === '1') {
                date_from = ONE_DAY
            } else if (val === '7') {
                date_from = ONE_WEEK
            } else if (val === '30') {
                date_from = ONE_MONTH;
            }

            return new Date(data[4]).getTime() > (current_time - date_from);
        });
        // Update and redraw the table when our custom select filter value changes
        recently_indexed.on('change', function() {
            resources_table.draw();
        });

        const resource_processing = new ResourceProcessing();
        // Clear existing resources when page is loaded
        resource_processing.clearResources();
        // Set list of selected resources
        resource_processing.selectedResourcesEventHandler(resources_table);
        // Setup various event listeners
        resource_processing.forceIndexing();
        resource_processing.indexItems();
        resource_processing.selectAll();
        resource_processing.clearSelectAll(resources_table);
        resource_processing.clearSelectedOnSubmit();
        resource_processing.deleteItem();

        // Set modal display of selected resources
        resource_processing.setModalDisplay();
    });
</script>